# available vmImages on azure pipelines:
# vs2017-win2016, windows-2019, ubuntu-18.04, ubuntu-16.04, macOS-10.14, macOS-10.13

trigger:
- master

- job: msvc_2019_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: |
      set SRC=%cd%
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      rd /s /q c:\mysql-5.7.21-winx64
      set
      mkdir logs
      mkdir release_x64
      pushd release_x64
      echo "CL version"
      cl
      cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON -DCMAKE_PREFIX_PATH=%SRC%\copperspice-libaries\lib\cmake\Catch2 -DCMAKE_IGNORE_PATH="C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/" -G "Visual Studio 16 2019" -A ..
      python ci\pype.py logs\cs_2019.txt -- cmake --build . --verbose
      python ci\pype.py logs\cs_2019_j1_gui.txt -- cmake -j 1 --build . --target CsGui --verbose
      python ci\pype.py logs\cs_2019_finish.txt -- cmake --build . --verbose
      ctest
    displayName: 'Build using VS2019 via Ninja - Release'
  - publish: $(System.DefaultWorkingDirectory)/logs
    artifact: logs_vs2019_release


- job: msvc_2019_Debug_x64
  timeoutInMinutes: 0
  pool:
    vmImage: 'windows-2019'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.6'
  - script: |
      set SRC=%cd%
      call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
      rd /s /q c:\mysql-5.7.21-winx64
      set
      mkdir logs
      mkdir debug_x64
      pushd debug_x64
      echo "CMake version:"
      cmake --version
      echo "Ninja version:"
      ninja --version
      cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTS=ON -DCMAKE_PREFIX_PATH=%SRC%\copperspice-libaries\lib\cmake\Catch2 -DCMAKE_IGNORE_PATH="C:/ProgramData/chocolatey/bin/;C:/Strawberry/c/bin/" -G Ninja ..
      python ci\pype.py logs\cs_2019.txt -- cmake --build . --verbose
      python ci\pype.py logs\cs_2019_j1_gui.txt -- cmake -j 1 --build . --target CsGui --verbose
      python ci\pype.py logs\cs_2019_finish.txt -- cmake --build . --verbose
      ctest
    displayName: 'Build using VS2019 via Ninja - Debug'
  - publish: $(System.DefaultWorkingDirectory)/logs
    artifact: logs_vs2019_debug


- job: Ubuntu_18_04_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: Ubuntu-18.04
  steps:
  - script: |
      set
      sudo apt-get update
      sudo apt-get -yq install ninja-build libfreetype6-dev libfontconfig1-dev libglib2.0-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libice-dev libaudio-dev libgl1-mesa-dev libc6-dev libsm-dev libxcursor-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxrandr-dev libxrender-dev  libxt6 libx11-dev  libpulse-dev libasound2-dev  libxcb1-dev libx11-xcb-dev  libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-shm0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxkbcommon-dev libxkbcommon-x11-dev
      mkdir release_x64
      pushd release_x64
      cmake -G Ninja -DCMAKE_DISABLE_FIND_PACKAGE_OpenSSL=TRUE -DCMAKE_BUILD_TYPE=Release ..
      popd
    displayName: 'Configure CMake Generator for Ubuntu ninja'
  - script: |
      cmake --build release_x64 --target CsCore
    displayName: 'Build Core'
  - script: |
      cmake --build release_x64 --target CsNetwork
    displayName: 'Build Network'
  - script: |
      cmake --build release_x64 --target CsGui
    displayName: 'Build Gui'
  - script: |
      cmake --build release_x64 --target CsSvg
    displayName: 'Build Svg'
  - script: |
      cmake --build release_x64 --target CsOpenGL
    displayName: 'Build OpenGL'
  - script: |
      cmake --build release_x64 --target CsMultimedia
    displayName: 'Build Multimedia'
  - script: |
      cmake --build release_x64 --target CsScript
    displayName: 'Build Script'
  - script: |
      cmake --build release_x64 --target CsSql
    displayName: 'Build Sql'
  - script: |
      cmake --build release_x64 --target CsXml
    displayName: 'Build Xml'
  - script: |
      cmake --build release_x64 --target CsXmlPatterns
    displayName: 'Build XmlPatterns'
  - script: |
      cmake --build release_x64
    displayName: 'Build leftovers'

- job: macos_10_14_Release_x64
  timeoutInMinutes: 0
  pool:
    vmImage: macos-10.14
  steps:
  - script: |
      ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" < /dev/null 2> /dev/null
      brew install ninja
    displayName: 'Prepare System'
  - script: |
      set
      set CMAKE_OSX_DEPLOYMENT_TARGET=10.14
      mkdir release_x64
      pushd release_x64
      cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
      popd
    displayName: 'Configure CMake Generator for XCode 10.14'
  - script: |
      cmake --build release_x64 --target CsCore
    displayName: 'Build Core'
  - script: |
      cmake --build release_x64 --target CsNetwork
    displayName: 'Build Network'
  - script: |
      cmake --build release_x64 --target CsGui
    displayName: 'Build Gui'
  - script: |
      cmake --build release_x64 --target CsSvg
    displayName: 'Build Svg'
  - script: |
      cmake --build release_x64 --target CsOpenGL
    displayName: 'Build OpenGL'
  - script: |
      cmake --build release_x64 --target CsMultimedia
    displayName: 'Build Multimedia'
  - script: |
      cmake --build release_x64 --target CsScript
    displayName: 'Build Script'
  - script: |
      cmake --build release_x64 --target CsSql
    displayName: 'Build Sql'
  - script: |
      cmake --build release_x64 --target CsXml
    displayName: 'Build Xml'
  - script: |
      cmake --build release_x64 --target CsXmlPatterns
    displayName: 'Build XmlPatterns'
  - script: |
      cmake --build release_x64
    displayName: 'Build leftovers'

